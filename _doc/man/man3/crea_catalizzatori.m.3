.TH "/Users/alessandrofilisetti/Documents/GIT/carness/_matlabinitializator/crea_catalizzatori.m" 3 "Wed Jul 24 2013" "Version 4.3 (20130719.55)" "CaRNeSS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/alessandrofilisetti/Documents/GIT/carness/_matlabinitializator/crea_catalizzatori.m \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "controllo while \fBtot_reaz\fP 
.br
*\fBreactionProbability\fP 
.br
*\fBcleavageProbability\fP tot_cleav \fBfprintf\fP ('la combinazione di \fBreactionProbability\fP e cleavageProbability\\n è sbagliata, non ci sono cleavage possibili sufficienti\\n') \fBreactionProbability\fP"
.br
.ti -1c
.RI "distribuendo le catalisi \fBa\fP 
.br
caso viene una distribuzione 
.br
uniforme \fBswitch\fP (\fBdecisione_catalizzatori\fP)%distribuzione dei \fBcatalizzatori\fP 1 random 2 con distribuzione case 1 \fBk\fP=0"
.br
.ti -1c
.RI "\fBend\fP \fBcatalizzatore\fP (\fBkk\fP, 1)"
.br
.ti -1c
.RI "id catalizzatore \fBcatalizzatore\fP (\fBkk\fP, 2)"
.br
.ti -1c
.RI "id specie \fBcatalizzatore\fP (\fBkk\fP, 3)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBfunction\fP [\fBcatalizzatore\fP \fBreazione\fP \fBspecie_non_esistenti\fP]"
.br
.ti -1c
.RI "\fBnumero_specie\fP = length(\fBfiring_disk\fP(:,1))"
.br
.ti -1c
.RI "for \fBi\fP"
.br
.ti -1c
.RI "\fBend\fP \fBtot_cond\fP = \fBnumero_specie\fP^2"
.br
.ti -1c
.RI "\fBtot_reaz\fP =\fBtot_cond\fP+tot_cleav"
.br
.ti -1c
.RI "\fBcleavageProbability\fP = input('introduci la nuova cleavageProbability \\n')"
.br
.ti -1c
.RI "\fBend\fP \fBcatalisi_reali\fP = \fBround\fP(\fBtot_reaz\fP*\fBreactionProbability\fP*\fBnumero_specie\fP)"
.br
.ti -1c
.RI "\fBreazione\fP = -9999"
.br
.ti -1c
.RI "\fBspecie_non_esistenti\fP {1,1} =-9999"
.br
.ti -1c
.RI "\fBelse\fP \fBh\fP = 0"
.br
.ti -1c
.RI "\fBindice\fP \fBreazione\fP \fBkk\fP = 0"
.br
.ti -1c
.RI "\fBindice\fP \fBcatalizzatore\fP while 
.br
\fBcatalisi_reali\fP \fBk\fP = k+1"
.br
.ti -1c
.RI "\fBnumero_specie_da_togliere\fP =0"
.br
.ti -1c
.RI "\fBend\fP \fBnumero_specie_da_togliere\fP \fBindex\fP = ceil(\fBrand\fP*(\fBnumero_specie\fP-\fBnumero_specie_da_togliere\fP))+\fBnumero_specie_da_togliere\fP"
.br
.ti -1c
.RI "\fBif\fP \fBfino_a_che_lunghezza_i_polimeri_non_catalizzano\fP == 0 %\fBi\fP monomeri non catalizzano 0"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBend\fP catalizzatore (\fBkk\fP, 1)"

.SS "id catalizzatore catalizzatore (\fBkk\fP, 2)"

.SS "id specie catalizzatore (\fBkk\fP, 3)"

.SS "controllo while \fBtot_reaz\fP* \fBreactionProbability\fP* \fBcleavageProbability\fP tot_cleav fprintf ('la combinazione di \fBreactionProbability\fP e cleavageProbability\\n èsbagliata, non ci sono cleavage possibili sufficienti\\n')"

.SS "distribuendo le catalisi \fBa\fP caso viene una distribuzione uniforme switch (\fBdecisione_catalizzatori\fP)\fC [pure virtual]\fP"

.SH "Variable Documentation"
.PP 
.SS "\fBif\fP catalisi_reali = \fBround\fP(\fBtot_reaz\fP*\fBreactionProbability\fP*\fBnumero_specie\fP)"

.PP
Definition at line 21 of file crea_catalizzatori\&.m\&.
.SS "cleavageProbability = input('introduci la nuova cleavageProbability \\n')"

.PP
Definition at line 18 of file crea_catalizzatori\&.m\&.
.SS "\fBif\fP fino_a_che_lunghezza_i_polimeri_non_catalizzano == 0 %\fBi\fP monomeri non catalizzano 0"

.PP
Definition at line 54 of file crea_catalizzatori\&.m\&.
.SS "function[\fBcatalizzatore\fP \fBreazione\fP \fBspecie_non_esistenti\fP]"
\fBInitial value:\fP
.PP
.nf
=crea_catalizzatori (firing_disk, reactionProbability, decisione_catalizzatori, fino_a_che_lunghezza_i_polimeri_non_catalizzano, alphabet, cleavageProbability, specie_def)
%function [catalizzatore reazione specie_non_esistenti]=crea_catalizzatori (firing_disk, reactionProbability, decisione_catalizzatori, fino_a_che_lunghezza_i_polimeri_non_catalizzano, alphabet, cleavageProbability, specie_def)

tot_cleav = 0
.fi
.PP
Definition at line 1 of file crea_catalizzatori\&.m\&.
.SS "\fBelse\fP h = 0"

.PP
Definition at line 29 of file crea_catalizzatori\&.m\&.
.SS "for i"
\fBInitial value:\fP
.PP
.nf
=1:numero_specie
    tot_cleav = tot_cleav + firing_disk(i,2)-1
.fi
.PP
Definition at line 7 of file crea_catalizzatori\&.m\&.
.SS "\fBelse\fP index = ceil(\fBrand\fP*(\fBnumero_specie\fP-\fBnumero_specie_da_togliere\fP))+\fBnumero_specie_da_togliere\fP"

.PP
Definition at line 49 of file crea_catalizzatori\&.m\&.
.SS "\fBindice\fP \fBcatalizzatore\fP while \fBcatalisi_reali\fP k = k+1"

.PP
Definition at line 40 of file crea_catalizzatori\&.m\&.
.SS "kk = 0"

.PP
Definition at line 36 of file crea_catalizzatori\&.m\&.
.SS "numero_specie = length(\fBfiring_disk\fP(:,1))"

.PP
Definition at line 5 of file crea_catalizzatori\&.m\&.
.SS "numero_specie_da_togliere =0"

.PP
Definition at line 43 of file crea_catalizzatori\&.m\&.
.SS "reazione = -9999"

.PP
Definition at line 25 of file crea_catalizzatori\&.m\&.
.SS "id \fBreazione\fP \fBif\fP \fBrand\fP< \fBcleavageProbability\fP%cleveage o condensazione??\fBcatalizzatore\fP(\fBkk\fP, 4)=1%caso cleveage \fBtrovato\fP=0 while \fBtrovato\fP==0 index_reaz=ceil(\fBrand\fP *(\fBnumero_specie\fP-length(\fBalphabet\fP)))+length(\fBalphabet\fP) punto_di_taglio=ceil(\fBrand\fP *(\fBfiring_disk\fP(index_reaz, 2)-1)) \fBreazione\fP(\fBk\fP, 1)=\fBk\fP \fBreazione\fP(\fBk\fP, 2)=1%id del cleavage:1 cleavage 0 condensazione \fBreazione\fP(\fBk\fP, 3)=\fBfiring_disk\fP(index_reaz, 1) sp=char(\fBspecie_def\fP(:,:)) sp1=char(sp(index_reaz, 1:punto_di_taglio)) sp2=char(sp(index_reaz, punto_di_taglio+1:\fBfiring_disk\fP(index_reaz, 2))) for \fBi\fP=1:length(\fBspecie_def\fP(:, 1)) \fBif\fP strcmp(deblank(sp(\fBi\fP,:)), sp1)==1 \fBreazione\fP(\fBk\fP, 4)=\fBi\fP \fBend\fP \fBif\fP strcmp(deblank(sp(\fBi\fP,:)), sp2)==1 \fBreazione\fP(\fBk\fP, 5)=\fBi\fP \fBend\fP \fBend\fP for \fBi\fP=length(\fBreazione\fP(:, 1)):-1:1 \fBif\fP((\fBsum\fP(\fBreazione\fP(\fBk\fP, 2:5)==\fBreazione\fP(\fBi\fP, 2:5)))==4 &&i~=\fBk\fP) \fBreazione\fP(\fBk\fP,:)=[] \fBk\fP=\fBk\fP-1 \fBcatalizzatore\fP(\fBkk\fP, 3)=\fBi\fP \fBtrovato\fP=1 \fBbreak\fP \fBelse\fP%CONTROLLARE IL CONTROLLO!!!!!DOPO IL||%TOGLIERE IL CONTROLLO DA QUI E DA SOTTO!!!if(\fBsum\fP(\fBreazione\fP(\fBk\fP, 3:5)==\fBreazione\fP(\fBi\fP, 3:5))==3 &&\fBreazione\fP(\fBk\fP, 2)~=\fBreazione\fP(\fBi\fP, 2))||((\fBreazione\fP(\fBk\fP, 3)==\fBreazione\fP(\fBi\fP, 3)&&\fBreazione\fP(\fBk\fP, 4)==\fBreazione\fP(\fBi\fP, 5)&&\fBreazione\fP(\fBk\fP, 5)==\fBreazione\fP(\fBi\fP, 4))) \fBtrovato\fP=0 \fBbreak\fP \fBelse\fP \fBtrovato\fP=1 \fBend\fP \fBend\fP \fBend\fP \fBend\fP \fBelse\fP%caso condensazione \fBcatalizzatore\fP(\fBkk\fP, 4)=0 \fBtrovato\fP=0 while \fBtrovato\fP==0 \fBreazione\fP(\fBk\fP, 1)=\fBk\fP \fBreazione\fP(\fBk\fP, 2)=0%id della condensazione:1 cleavage 0 condensazione index_specie_1=ceil(\fBrand\fP *(\fBnumero_specie\fP)) index_specie_2=ceil(\fBrand\fP *(\fBnumero_specie\fP)) nuova_specie=[deblank(\fBspecie_def\fP(index_specie_1,:)), deblank(\fBspecie_def\fP(index_specie_2,:))] nuova_specie=char(nuova_specie) sp=char(\fBspecie_def\fP(:,:)) found=0%controllo per vedere \fBse\fP trovo una specie che esiste già for \fBi\fP=1:length(\fBspecie_def\fP(:, 1)) \fBif\fP strcmp(deblank(sp(\fBi\fP,:)), deblank(nuova_specie))==1 \fBreazione\fP(\fBk\fP, 3)=\fBi\fP found=1 \fBend\fP \fBif\fP strcmp(deblank(sp(\fBi\fP,:)), deblank(sp(index_specie_1,:)))==1 \fBreazione\fP(\fBk\fP, 4)=\fBi\fP \fBend\fP \fBif\fP strcmp(deblank(sp(\fBi\fP,:)), deblank(sp(index_specie_2,:)))==1 \fBreazione\fP(\fBk\fP, 5)=\fBi\fP \fBend\fP \fBend\fP \fBif\fP found==0%\fBse\fP ho \fBtrovato\fP una specie che NON esiste \fBh\fP=\fBh\fP+1 \fBreazione\fP(\fBk\fP, 3)=length(\fBspecie_def\fP(:, 1))+\fBh\fP specie_non_esistenti(\fBh\fP)={nuova_specie}for iii=h:-1:1 \fBif\fP strcmp(specie_non_esistenti(\fBh\fP), specie_non_esistenti(iii))==1 &&h~=iii specie_non_esistenti(\fBh\fP)=[] \fBh\fP=\fBh\fP-1 \fBreazione\fP(\fBk\fP, 3)=length(\fBspecie_def\fP(:, 1))+iii \fBend\fP \fBend\fP \fBend\fP%controllo che la \fBreazione\fP non esista già for \fBi\fP=length(\fBreazione\fP(:, 1)):-1:1 \fBif\fP(\fBsum\fP(\fBreazione\fP(\fBk\fP, 2:5)==\fBreazione\fP(\fBi\fP, 2:5)))==4 &&i~=\fBk\fP \fBreazione\fP(\fBk\fP,:)=[] \fBk\fP=\fBk\fP-1 \fBcatalizzatore\fP(\fBkk\fP, 3)=\fBi\fP \fBtrovato\fP=1 \fBbreak\fP \fBelse\fP \fBif\fP(\fBsum\fP(\fBreazione\fP(\fBk\fP, 3:5)==\fBreazione\fP(\fBi\fP, 3:5))==3 &&\fBreazione\fP(\fBk\fP, 2)~=\fBreazione\fP(\fBi\fP, 2))||((\fBreazione\fP(\fBk\fP, 3)==\fBreazione\fP(\fBi\fP, 3)&&\fBreazione\fP(\fBk\fP, 4)==\fBreazione\fP(\fBi\fP, 5)&&\fBreazione\fP(\fBk\fP, 5)==\fBreazione\fP(\fBi\fP, 4))) \fBtrovato\fP=0 \fBbreak\fP \fBelse\fP \fBtrovato\fP=1 \fBend\fP \fBend\fP \fBend\fP \fBend\fP \fBend\fP%controllo per evitare che lo stesso \fBcatalizzatore\fP catalizzi la%stessa \fBreazione\fP trovato_uguale=1 for iiii=length(\fBcatalizzatore\fP(:, 1)):-1:1 \fBif\fP \fBsum\fP(\fBcatalizzatore\fP(\fBkk\fP, 2:3)==\fBcatalizzatore\fP(iiii, 2:3))==2 &&kk~=iiii \fBcatalizzatore\fP(\fBkk\fP,:)=[] \fBkk\fP=\fBkk\fP-1 trovato_uguale=0 \fBbreak\fP \fBend\fP \fBend\fP \fBif\fP trovato_uguale==1 \fBcatalisi_reali\fP=\fBcatalisi_reali\fP-1 \fBend\fP \fBend\fP \fBif\fP \fBexist\fP('specie_non_esistenti')> specie_non_esistenti {1,1} =-9999"

.PP
Definition at line 26 of file crea_catalizzatori\&.m\&.
.SS "\fBend\fP tot_cond = \fBnumero_specie\fP^2"

.PP
Definition at line 10 of file crea_catalizzatori\&.m\&.
.SS "tot_reaz =\fBtot_cond\fP+tot_cleav"

.PP
Definition at line 12 of file crea_catalizzatori\&.m\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CaRNeSS from the source code\&.
