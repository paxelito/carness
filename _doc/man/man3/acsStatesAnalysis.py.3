.TH "/Users/alessandrofilisetti/Documents/GIT/carness/_analysis/underDevelopment/acsStatesAnalysis.py" 3 "Tue Dec 10 2013" "Version 4.8 (20131210.63)" "CaRNeSS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/alessandrofilisetti/Documents/GIT/carness/_analysis/underDevelopment/acsStatesAnalysis.py \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBacsStatesAnalysis\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "def \fBacsStatesAnalysis\&.zeroBeforeStrNum\fP"
.br
.ti -1c
.RI "def \fBacsStatesAnalysis\&.returnZeroSpeciesList\fP"
.br
.ti -1c
.RI "def \fBacsStatesAnalysis\&.distanceMisures\fP"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.today\fP = dt\&.date\&.today()"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.StrPath\fP = os\&.path\&.abspath(StrPath)"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.tmpDirs\fP = sort(os\&.listdir(StrPath))"
.br
.ti -1c
.RI "string \fBacsStatesAnalysis\&.currentDir\fP = ''"
.br
.ti -1c
.RI "string \fBacsStatesAnalysis\&.ndn\fP = \fBcurrentDir\fP+'_0_new_allStatResults'"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.newdirAllResults\fP = os\&.path\&.join(os\&.curdir, ndn)"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.previousFILE_FID\fP = open('STAT_t_tminus_1\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.previousNOINFLUX_FILE_FID\fP = open('STAT_t_tminus_1_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.startFILE_FID\fP = open('STAT_t_start\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.startNOINFLUX_FILE_FID\fP = open('STAT_t_start_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_previousFILE_FID\fP = open('STAT_HAM_t_tminus_1\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_previousNOINFLUX_FILE_FID\fP = open('STAT_HAM_t_tminus_1_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_startFILE_FID\fP = open('STAT_HAM_t_start\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_startNOINFLUX_FILE_FID\fP = open('STAT_HAM_t_start_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_previousFILE_FID\fP = open('STAT_EUC_t_tminus_1\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_previousNOINFLUX_FILE_FID\fP = open('STAT_EUC_t_tminus_1_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_startFILE_FID\fP = open('STAT_EUC_t_start\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_startNOINFLUX_FILE_FID\fP = open('STAT_EUC_t_start_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.ANG_middlePreviousFILE_FID\fP = open('STAT_ANG_t_middle_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_middlePreviousFILE_FID\fP = open('STAT_HAM_t_middle_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_middlePreviousFILE_FID\fP = open('STAT_EUC_t_middle_NOINFLUX\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.previousFILE_FID_group\fP = open('STAT_t_tminus_1_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.previousNOINFLUX_FILE_FID_group\fP = open('STAT_t_tminus_1_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.startFILE_FID_group\fP = open('STAT_t_start_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.startNOINFLUX_FILE_FID_group\fP = open('STAT_t_start_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_previousFILE_FID_group\fP = open('STAT_HAM_t_tminus_1_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_previousNOINFLUX_FILE_FID_group\fP = open('STAT_HAM_t_tminus_1_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_startFILE_FID_group\fP = open('STAT_HAM_t_start_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.HAM_startNOINFLUX_FILE_FID_group\fP = open('STAT_HAM_t_start_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_previousFILE_FID_group\fP = open('STAT_EUC_t_tminus_1_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_previousNOINFLUX_FILE_FID_group\fP = open('STAT_EUC_t_tminus_1_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_startFILE_FID_group\fP = open('STAT_EUC_t_start_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.EUC_startNOINFLUX_FILE_FID_group\fP = open('STAT_EUC_t_start_NOINFLUX_group\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.newSpecies_FID\fP = open('STAT_GENERAL_newSpecies\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.livingSpecies_FID\fP = open('STAT_GENERAL_livingSpecies\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.mols_FID\fP = open('STAT_GENERAL_mols\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.totMass_FID\fP = open('STAT_GENERAL_overallMass\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.totOverallMass_FID\fP = open('STAT_GENERAL_overallTotMass\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.complex_FID\fP = open('STAT_GENERAL_complex\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.complexMols_FID\fP = open('STAT_GENERAL_complexMols\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.evaluatedFID\fP = open('STAT_GENERAL_evaluated\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.zeroOneSpeciesFID\fP = open('STAT_GENERAL_zeroOneSpecies\&.csv', 'w')"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.biodeversityFID\fP = open('STAT_GENERAL_bioDiversity\&.csv', 'w')"
.br
.ti -1c
.RI "int \fBacsStatesAnalysis\&.validDir\fP = 1"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.totDirName\fP = os\&.path\&.join(StrPath,tmpDir)"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.resDirPath\fP = os\&.path\&.abspath(os\&.path\&.join('\&./', 'res'))"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.numberOfGen\fP = len(glob\&.glob(os\&.path\&.join(resDirPath,'times_*')))"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.group_A_prev\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.group_A_start\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.group_A_prev_NI\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.group_A_start_NI\fP = []"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.strZeros\fP = zeroBeforeStrNum(ngen, numberOfGen)"
.br
.ti -1c
.RI "string \fBacsStatesAnalysis\&.strSpeciesZero\fP = 'species_'"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.speciesFilesZero\fP = sorted(glob\&.glob(os\&.path\&.join(resDirPath,strSpeciesZero)))"
.br
.ti -1c
.RI "string \fBacsStatesAnalysis\&.strSpecies\fP = 'species_'"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.speciesFiles\fP = sorted(glob\&.glob(os\&.path\&.join(resDirPath,strSpecies)))"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.zeroList\fP = returnZeroSpeciesList(\fBspeciesFiles\fP[-1])"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.speciesConcs\fP = np\&.zeros((len(\fBspeciesFiles\fP)+1,len(zeroList)))"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.seqOLD\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.seqSTART\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.totMass\fP = []"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.seqMIDDLE_NOINFLUX\fP = []"
.br
.ti -1c
.RI "int \fBacsStatesAnalysis\&.oldNumberOfSpecies\fP = 0"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.fidSpecies\fP = open(sngSpeciesFile, '\fBr\fP')"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.seq\fP = []"
.br
.ti -1c
.RI "int \fBacsStatesAnalysis\&.tmpMols\fP = 0"
.br
.ti -1c
.RI "int \fBacsStatesAnalysis\&.bioDivInd\fP = 0"
.br
.ti -1c
.RI "\fBacsStatesAnalysis\&.deltaNspecies\fP = numberOfSpecies-oldNumberOfSpecies"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.strtoW\fP = str(deltaNspecies)"
.br
.ti -1c
.RI "tuple \fBacsStatesAnalysis\&.tmpMisure\fP = distanceMisures(seq, \fBconc\fP, seqOLD, concOLD, idS)"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.seqOLDNOINFLUX\fP = seqNOINFLUX[:]"
.br
.ti -1c
.RI "list \fBacsStatesAnalysis\&.concOLD\fP = \fBconc\fP[:]"
.br
.ti -1c
.RI "string \fBacsStatesAnalysis\&.filename\fP = 'STAT_species_Concentrations_'"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for CaRNeSS from the source code\&.
