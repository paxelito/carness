<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="common_functions_8cpp" kind="file">
    <compoundname>commonFunctions.cpp</compoundname>
    <includes refid="common_functions_8h" local="yes">commonFunctions.h</includes>
    <incdepgraph>
      <node id="138">
        <label>mtrand.h</label>
        <link refid="mtrand_8h"/>
      </node>
      <node id="134">
        <label>cmath</label>
      </node>
      <node id="129">
        <label>string</label>
      </node>
      <node id="125">
        <label>acs_headers.h</label>
        <link refid="acs__headers_8h"/>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>fstream</label>
      </node>
      <node id="123">
        <label>/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp</label>
        <link refid="commonFunctions.cpp"/>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>ctime</label>
      </node>
      <node id="124">
        <label>commonFunctions.h</label>
        <link refid="common_functions_8h"/>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>vector</label>
      </node>
      <node id="131">
        <label>sstream</label>
      </node>
      <node id="135">
        <label>cstdlib</label>
      </node>
      <node id="136">
        <label>clocale</label>
      </node>
      <node id="127">
        <label>iostream</label>
      </node>
      <node id="133">
        <label>deque</label>
      </node>
      <node id="126">
        <label>stdio.h</label>
      </node>
      <node id="130">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="common_functions_8cpp_1ab210458a0dbaa0cc2f245926c7aa82ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int returnSelectionIdFromAWeightProbVector</definition>
        <argsstring>(acs_double *tmpArray, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>returnSelectionIdFromAWeightProbVector</name>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref> *</type>
          <declname>tmpArray</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
<para>This funtion returns a random position in a probability weight array of N elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="15" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="15" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1ab037fdfaa93ee6a0fe3f624b791204cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt returnSelectionIdFromAWeightProbVector</definition>
        <argsstring>(vector&lt; acs_double &gt; &amp;tmpVector, acs_double tmpMaxValue, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>returnSelectionIdFromAWeightProbVector</name>
        <param>
          <type>vector&lt; <ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref> &gt; &amp;</type>
          <declname>tmpVector</declname>
        </param>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpMaxValue</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return position of a randomly selected element from a vector containing cumulative values for each element <simplesect kind="version"><para>1.0 </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector&lt;acs_double&gt;&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpVector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acs_double</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX VALUE contained within the QList (being a cumulative list this is the last value) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MTRand&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpRandomGenerator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="40" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="40" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a4135ff15fd24eb8fbfee3d00e1cfbf20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt returnSelectionIdFromAWeightProbVectorAlreadyNormalized</definition>
        <argsstring>(vector&lt; acs_double &gt; &amp;tmpVector, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>returnSelectionIdFromAWeightProbVectorAlreadyNormalized</name>
        <param>
          <type>vector&lt; <ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref> &gt; &amp;</type>
          <declname>tmpVector</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return position of a randomly selected element from a normalized vector containing cumulative values for each element <simplesect kind="version"><para>1.0 </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector&lt;acs_double&gt;&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpQList </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MTRand&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpRandomGenerator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="72" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="72" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a1cb9cc6ac8ec2ef62b8eb1970e73a11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt returnUniformSelection_LONG_IdFromVector</definition>
        <argsstring>(vector&lt; acs_longInt &gt; &amp;tmpVector, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>returnUniformSelection_LONG_IdFromVector</name>
        <param>
          <type>vector&lt; <ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref> &gt; &amp;</type>
          <declname>tmpVector</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return position of a LONG INT randomly selected element from a normalized vector containing cumulative values for each element <simplesect kind="version"><para>1.0 </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector&lt;acs_double&gt;&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpVector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MTRand&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para>tmpRandomGenerator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="124" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a6d28311eff309499e66efb5d39a035f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt getIntRandom</definition>
        <argsstring>(acs_longInt tmpFromNum, acs_longInt tmpToNum, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>getIntRandom</name>
        <param>
          <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
          <declname>tmpFromNum</declname>
        </param>
        <param>
          <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
          <declname>tmpToNum</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="131" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="131" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1aed308af1d3ee40e106e4e23e78644d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
        <definition>acs_double getDoubleRandom</definition>
        <argsstring>(acs_double tmpFromNum, acs_double tmpToNum, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>getDoubleRandom</name>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpFromNum</declname>
        </param>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpToNum</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="151" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="151" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a22cddb6ffcf2250e0c90bc913728350f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt random_poisson</definition>
        <argsstring>(acs_double tmpLambda, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>random_poisson</name>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpLambda</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to return a number from a poisson random distribution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="183" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="183" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a78d5b4a67b6e66b8ceaa85874a2a12b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
        <definition>acs_longInt random_binomial</definition>
        <argsstring>(acs_longInt n, acs_double tmpP, MTRand &amp;tmpRandomGenerator)</argsstring>
        <name>random_binomial</name>
        <param>
          <type><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpP</declname>
        </param>
        <param>
          <type><ref refid="class_m_t_rand" kindref="compound">MTRand</ref> &amp;</type>
          <declname>tmpRandomGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to return a number from a binomial distribution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="203" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="203" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1aaaa7233fe68b91b6333e2729a2d619a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
        <definition>acs_double round</definition>
        <argsstring>(acs_double tmpX)</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref></type>
          <declname>tmpX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to round double numbers in integers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="229" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a1a13653eb649b6fc74090deecddf1028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string dec2bin</definition>
        <argsstring>(acs_int tmpInt)</argsstring>
        <name>dec2bin</name>
        <param>
          <type><ref refid="acs__headers_8h_1a8d277355641a098190360234e2ebde35" kindref="member">acs_int</ref></type>
          <declname>tmpInt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to convert a decimal number in a binary string composed of 12 bit such Example -&gt; input: 10, binary 1010 <ndash/>&gt; 000000001010 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="241" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="241" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1aa678d0a98232158c48108227b98de4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ExitWithError</definition>
        <argsstring>(string strFunctionName, string strError)</argsstring>
        <name>ExitWithError</name>
        <param>
          <type>string</type>
          <declname>strFunctionName</declname>
        </param>
        <param>
          <type>string</type>
          <declname>strError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to close the program after having en error </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="269" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="269" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1a4d1aa74fac80ae0275c056575fdb6626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt;string&gt; split</definition>
        <argsstring>(string str, const char *delim)</argsstring>
        <name>split</name>
        <param>
          <type>string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to split a string and save tokens in a vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="279" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="279" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="common_functions_8cpp_1aed580149796de6350e6fcfae9b2adb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fromStrToBool</definition>
        <argsstring>(string const &amp;string)</argsstring>
        <name>fromStrToBool</name>
        <param>
          <type>string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to convert from string to boolean </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" line="302" column="1" bodyfile="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>commonFunctions.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>acsm2s</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>by<sp/>Alessandro<sp/>Filisetti<sp/>on<sp/>27/03/09.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>2009<sp/>__MyCompanyName__.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//prova</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_functions_8h" kindref="compound">commonFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="common_functions_8h_1ab210458a0dbaa0cc2f245926c7aa82ef" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="common_functions_8cpp_1ab210458a0dbaa0cc2f245926c7aa82ef" kindref="member" tooltip="This funtion returns a random position in a probability weight array of N elements. ">returnSelectionIdFromAWeightProbVector</ref>(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>*tmpArray,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tmpArray<sp/>is<sp/>not<sp/>a<sp/>vector.<sp/>Access<sp/>is<sp/>made<sp/>by<sp/>[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>pnt<sp/>=<sp/>tmpRandomGenerator();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(foundFlag<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpArray[position]<sp/>&gt;<sp/>pnt)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position++;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idReturned;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="common_functions_8h_1ab037fdfaa93ee6a0fe3f624b791204cd" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1ab210458a0dbaa0cc2f245926c7aa82ef" kindref="member" tooltip="This funtion returns a random position in a probability weight array of N elements. ">returnSelectionIdFromAWeightProbVector</ref>(vector&lt;acs_double&gt;&amp;<sp/>tmpVector,<sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpMaxValue,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>pnt<sp/>=<sp/>tmpRandomGenerator();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(foundFlag<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpVector.at(position)<sp/>&gt;<sp/>(pnt*tmpMaxValue))</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>returnSelectionIdFromAWeightProbVector<sp/>tmpVector.at(position)...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>size&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpVector.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>position&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>position<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;exception<sp/>caught:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_functions_8cpp_1aa678d0a98232158c48108227b98de4b6" kindref="member">ExitWithError</ref>(</highlight><highlight class="stringliteral">&quot;returnSelectionIdFromAWeightProbVector&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;exception<sp/>error<sp/>thrown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position++;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idReturned;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="common_functions_8h_1a4135ff15fd24eb8fbfee3d00e1cfbf20" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1a4135ff15fd24eb8fbfee3d00e1cfbf20" kindref="member">returnSelectionIdFromAWeightProbVectorAlreadyNormalized</ref>(vector&lt;acs_double&gt;&amp;<sp/>tmpVector,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>pnt<sp/>=<sp/>tmpRandomGenerator();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpCumulativeProbability<sp/>=<sp/>tmpVector.at(0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(foundFlag<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(position<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)tmpVector.size())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>FATAL<sp/>ERROR<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!<sp/>!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;idReturned:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idReturned<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Position<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>position<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>grater<sp/>than<sp/>the<sp/>maximum<sp/>number<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>tmpVector.size()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cum<sp/>prob:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpCumulativeProbability&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>RN:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pnt<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t<sp/>Suggestion<sp/>&gt;&gt;<sp/>Check<sp/>that<sp/>the<sp/>cumulative<sp/>sum<sp/>of<sp/>the<sp/>probabilities<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_functions_8cpp_1aa678d0a98232158c48108227b98de4b6" kindref="member">ExitWithError</ref>(</highlight><highlight class="stringliteral">&quot;returnSelectionIdFromAWeightProbQListAlreadyNormalized&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>return<sp/>selection<sp/>from<sp/>weight<sp/>prob<sp/>Qlist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpCumulativeProbability<sp/>&gt;=<sp/>pnt)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)tmpVector.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idReturned<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpCumulativeProbability<sp/>+=<sp/>tmpVector.at(position);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(exception&amp;e)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;returnSelectionIdFromAWeightProbVectorAlreadyNormalized<sp/>tmpVector.at(position)...&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Vector<sp/>size<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;tmpVector.size()&lt;&lt;</highlight><highlight class="stringliteral">&quot;-<sp/>position&quot;</highlight><highlight class="normal">&lt;&lt;position&lt;&lt;endl;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;exceptioncaught:&quot;</highlight><highlight class="normal">&lt;&lt;e.what()&lt;&lt;endl;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_functions_8cpp_1aa678d0a98232158c48108227b98de4b6" kindref="member">ExitWithError</ref>(</highlight><highlight class="stringliteral">&quot;returnSelectionIdFromAWeightProbVectorAlreadyNormalized&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;exceptionerrorthrown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position++;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idReturned;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="common_functions_8h_1a1cb9cc6ac8ec2ef62b8eb1970e73a11b" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1a1cb9cc6ac8ec2ef62b8eb1970e73a11b" kindref="member">returnUniformSelection_LONG_IdFromVector</ref>(vector&lt;acs_longInt&gt;&amp;<sp/>tmpVector,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>totalSize<sp/>=<sp/>tmpVector.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>pnt<sp/>=<sp/><ref refid="common_functions_8cpp_1a6d28311eff309499e66efb5d39a035f4" kindref="member">getIntRandom</ref>(0,<sp/>totalSize,<sp/>tmpRandomGenerator);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pnt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="common_functions_8h_1a6d28311eff309499e66efb5d39a035f4" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1a6d28311eff309499e66efb5d39a035f4" kindref="member">getIntRandom</ref>(<ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>tmpFromNum,<sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>tmpToNum,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmpToNum<sp/>&lt;<sp/>tmpFromNum)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tmpToNum<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpToNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>is<sp/>&lt;<sp/>of<sp/>tmpFromNum<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpFromNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>...<sp/>Cannot<sp/>generate<sp/>a<sp/>number<sp/>with<sp/>a<sp/>negative<sp/>delta&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>Result<sp/>=<sp/>tmpRandomGenerator()<sp/>*<sp/>(tmpToNum<sp/>+<sp/>1<sp/>-<sp/>tmpFromNum)<sp/>+<sp/>tmpFromNum;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>random<sp/>outcome<sp/>in<sp/>Result<sp/>variable<sp/>is<sp/>out<sp/>of<sp/>the<sp/>boundaries<sp/>passed<sp/>by<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>exit<sp/>with<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((Result<sp/>&lt;<sp/>tmpFromNum)<sp/>||<sp/>(Result<sp/>&gt;<sp/>tmpToNum))</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Result<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tGenerate<sp/>a<sp/>number<sp/>out<sp/>of<sp/>boundaries&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(Result);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="common_functions_8h_1aed308af1d3ee40e106e4e23e78644d07" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/><ref refid="common_functions_8cpp_1aed308af1d3ee40e106e4e23e78644d07" kindref="member">getDoubleRandom</ref>(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpFromNum,<sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpToNum,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>parameters<sp/>passed<sp/>to<sp/>this<sp/>function<sp/>are<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>exit<sp/>with<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((tmpFromNum<sp/>&lt;<sp/>0)<sp/>||<sp/>(tmpToNum<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tmpFromNum:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpFromNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\ttmpToNum:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpToNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tCannot<sp/>generate<sp/>a<sp/>number<sp/>with<sp/>negative<sp/>numbers&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>tmpToNum<sp/>is<sp/>minor<sp/>of<sp/>tmpFromNum<sp/>this<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>exit<sp/>with<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmpToNum<sp/>&lt;<sp/>tmpFromNum)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tmpToNum<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpFromNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>is<sp/>&lt;<sp/>of<sp/>tmpFromNum<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tmpToNum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>...<sp/>Cannot<sp/>generate<sp/>a<sp/>number<sp/>with<sp/>a<sp/>negative<sp/>delta&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref><sp/>randomGen;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>Result<sp/>=<sp/>tmpRandomGenerator()<sp/>*<sp/>(tmpToNum<sp/>-<sp/>tmpFromNum)<sp/>+<sp/>tmpFromNum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>random<sp/>outcome<sp/>in<sp/>Result<sp/>variable<sp/>is<sp/>out<sp/>of<sp/>the<sp/>boundaries<sp/>passed<sp/>by<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>exit<sp/>with<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((Result<sp/>&lt;<sp/>tmpFromNum)<sp/>||<sp/>(Result<sp/>&gt;<sp/>tmpToNum))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Result<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tGenerate<sp/>a<sp/>number<sp/>out<sp/>of<sp/>boundaries&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(Result);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="common_functions_8h_1a22cddb6ffcf2250e0c90bc913728350f" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1a22cddb6ffcf2250e0c90bc913728350f" kindref="member">random_poisson</ref>(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpLambda,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/><ref refid="general_concentration_over_threshold_8m_1aa2b4c35904308d35fc5d606a429e608d" kindref="member">p</ref>=exp(-tmpLambda);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>g=<ref refid="general_concentration_over_threshold_8m_1aa2b4c35904308d35fc5d606a429e608d" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>u=tmpRandomGenerator();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>=0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(u&gt;g)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p*=(tmpLambda/(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref>)(++k));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g+=<ref refid="general_concentration_over_threshold_8m_1aa2b4c35904308d35fc5d606a429e608d" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="common_functions_8h_1a78d5b4a67b6e66b8ceaa85874a2a12b7" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="common_functions_8cpp_1a78d5b4a67b6e66b8ceaa85874a2a12b7" kindref="member">random_binomial</ref>(<ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/>n,<sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpP,<sp/><ref refid="class_m_t_rand" kindref="compound">MTRand</ref>&amp;<sp/>tmpRandomGenerator)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acs_double<sp/>t=tmpP/(1-tmpP);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acs_double<sp/>u=tmpRandomGenerator();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acs_double<sp/>p0=pow(double(1-tmpP),double(n));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acs_double<sp/>g=p0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acs_longInt<sp/>k=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(u&gt;g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0*=t*(n-k)/(k+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g+=p0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>k;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a19319d75f02db4308bc5c0026d98cd85" kindref="member">acs_longInt</ref><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="acs__headers_8h_1a8d277355641a098190360234e2ebde35" kindref="member">acs_int</ref><sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref><sp/>&lt;<sp/>n;<sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmpRandomGenerator()<sp/>&lt;<sp/>tmpP)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="common_functions_8h_1aaaa7233fe68b91b6333e2729a2d619a1" refkind="member"><highlight class="normal"><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/><ref refid="common_functions_8cpp_1aaaa7233fe68b91b6333e2729a2d619a1" kindref="member">round</ref>(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>tmpX)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integer<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1a8d277355641a098190360234e2ebde35" kindref="member">acs_int</ref><sp/>integerPart<sp/>=<sp/>(<ref refid="acs__headers_8h_1a8d277355641a098190360234e2ebde35" kindref="member">acs_int</ref>)tmpX;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref><sp/>decimalPart<sp/>=<sp/>tmpX<sp/>-<sp/>(<ref refid="acs__headers_8h_1ab776853a005fcbf56af0424a2a4dd607" kindref="member">acs_double</ref>)integerPart;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decimalPart&gt;=0.5){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ceil(decimalPart)<sp/>+<sp/>integerPart;}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>floor(decimalPart)<sp/>+<sp/>integerPart;}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="common_functions_8h_1a1a13653eb649b6fc74090deecddf1028" refkind="member"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="common_functions_8cpp_1a1a13653eb649b6fc74090deecddf1028" kindref="member">dec2bin</ref>(<ref refid="acs__headers_8h_1a8d277355641a098190360234e2ebde35" kindref="member">acs_int</ref><sp/>tmpInt){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="crea__e__controlla__i__catalizzatori_8m_1ae113ea7f9e515a12ac4b5595c6faf61e" kindref="member">size</ref>=</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmpInt)*8;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s=0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="conc_analysis_8m_1a230414213a9710ed03b6cf8d2695ee94" kindref="member">a</ref>=0;<ref refid="conc_analysis_8m_1a230414213a9710ed03b6cf8d2695ee94" kindref="member">a</ref>&lt;<ref refid="crea__e__controlla__i__catalizzatori_8m_1ae113ea7f9e515a12ac4b5595c6faf61e" kindref="member">size</ref>;<ref refid="conc_analysis_8m_1a230414213a9710ed03b6cf8d2695ee94" kindref="member">a</ref>++){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bit=tmpInt&gt;&gt;(size-1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(bit+</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpInt&lt;&lt;=1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res.size())</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>&apos;0&apos;<sp/>char<sp/>to<sp/>complete<sp/>the<sp/>string<sp/>of<sp/>12<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(res.size()<sp/>&lt;<sp/>12)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>res;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="common_functions_8h_1aa678d0a98232158c48108227b98de4b6" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_functions_8cpp_1aa678d0a98232158c48108227b98de4b6" kindref="member">ExitWithError</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strFunctionName,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strError)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strFunctionName<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strError<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="common_functions_8h_1a4d1aa74fac80ae0275c056575fdb6626" refkind="member"><highlight class="normal">vector&lt;string&gt;<sp/><ref refid="common_functions_8cpp_1a4d1aa74fac80ae0275c056575fdb6626" kindref="member">split</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>delim)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>writable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[str.size()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(str.begin(),<sp/>str.end(),<sp/>writable);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>writable[str.size()]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>forget<sp/>the<sp/>terminating<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token<sp/>=<sp/>strtok(writable,delim);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(token);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok(NULL,delim);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>writable;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="common_functions_8h_1aed580149796de6350e6fcfae9b2adb30" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_functions_8cpp_1aed580149796de6350e6fcfae9b2adb30" kindref="member">fromStrToBool</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/alessandrofilisetti/Documents/GIT/carness/commonFunctions.cpp"/>
  </compounddef>
</doxygen>
