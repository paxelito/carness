<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="mtrand_8cpp" kind="file">
    <compoundname>mtrand.cpp</compoundname>
    <includes refid="mtrand_8h" local="yes">mtrand.h</includes>
    <incdepgraph>
      <node id="287">
        <label>mtrand.h</label>
        <link refid="mtrand_8h"/>
      </node>
      <node id="286">
        <label>/Users/alessandrofilisetti/Documents/GIT/carness/mtrand.cpp</label>
        <link refid="mtrand.cpp"/>
        <childnode refid="287" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>mtrand.cpp,<sp/>see<sp/>include<sp/>file<sp/>mtrand.h<sp/>for<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mtrand_8h" kindref="compound">mtrand.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-inline<sp/>function<sp/>definitions<sp/>and<sp/>static<sp/>member<sp/>definitions<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reside<sp/>in<sp/>header<sp/>file<sp/>because<sp/>of<sp/>the<sp/>risk<sp/>of<sp/>multiple<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//aripprova</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialization<sp/>of<sp/>static<sp/>private<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>MTRand_int32::state[n]<sp/>=<sp/>{0x0UL};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MTRand_int32::p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MTRand_int32::init<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MTRand_int32::gen_state()<sp/>{<sp/></highlight><highlight class="comment">//<sp/>generate<sp/>new<sp/>state<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref><sp/>&lt;<sp/>(n<sp/>-<sp/>m);<sp/>++<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>=<sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref><sp/>+<sp/>m]<sp/>^<sp/>twiddle(state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>],<sp/>state[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n<sp/>-<sp/>m;<sp/>i<sp/>&lt;<sp/>(n<sp/>-<sp/>1);<sp/>++<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>state[i<sp/>+<sp/>m<sp/>-<sp/>n]<sp/>^<sp/>twiddle(state[i],<sp/>state[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>state[n<sp/>-<sp/>1]<sp/>=<sp/>state[m<sp/>-<sp/>1]<sp/>^<sp/>twiddle(state[n<sp/>-<sp/>1],<sp/>state[0]);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_m_t_rand__int32_1a0c57076fe30358e0700a7ce1baa0ea27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_m_t_rand__int32_1a0c57076fe30358e0700a7ce1baa0ea27" kindref="member">MTRand_int32::seed</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>by<sp/>32<sp/>bit<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>state[0]<sp/>=<sp/>s<sp/>&amp;<sp/>0xFFFFFFFFUL;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>&gt;<sp/>32<sp/>bit<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>++<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>=<sp/>1812433253UL<sp/>*<sp/>(state[i<sp/>-<sp/>1]<sp/>^<sp/>(state[i<sp/>-<sp/>1]<sp/>&gt;&gt;<sp/>30))<sp/>+<sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Knuth<sp/>TAOCP<sp/>Vol2.<sp/>3rd<sp/>Ed.<sp/>P.106<sp/>for<sp/>multiplier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>previous<sp/>versions,<sp/>MSBs<sp/>of<sp/>the<sp/>seed<sp/>affect<sp/>only<sp/>MSBs<sp/>of<sp/>the<sp/>array<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2002/01/09<sp/>modified<sp/>by<sp/>Makoto<sp/>Matsumoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>&amp;=<sp/>0xFFFFFFFFUL;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>&gt;<sp/>32<sp/>bit<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>n;<sp/></highlight><highlight class="comment">//<sp/>force<sp/>gen_state()<sp/>to<sp/>be<sp/>called<sp/>for<sp/>next<sp/>random<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_m_t_rand__int32_1a3cabc1e3445716236a570ffd2f69686d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_m_t_rand__int32_1a0c57076fe30358e0700a7ce1baa0ea27" kindref="member">MTRand_int32::seed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="crea__e__controlla__i__catalizzatori_8m_1ae113ea7f9e515a12ac4b5595c6faf61e" kindref="member">size</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>init<sp/>by<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="class_m_t_rand__int32_1a0c57076fe30358e0700a7ce1baa0ea27" kindref="member">seed</ref>(19650218UL);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1,<sp/><ref refid="general_concentration_over_threshold_8m_1ad34e9c7e9ae69ae0b9f1866faed5e4ad" kindref="member">j</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref><sp/>=<sp/>((n<sp/>&gt;<sp/>size)<sp/>?<sp/>n<sp/>:<sp/>size);<sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>;<sp/>--<ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>=<sp/>(state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>^<sp/>((state[i<sp/>-<sp/>1]<sp/>^<sp/>(state[i<sp/>-<sp/>1]<sp/>&gt;&gt;<sp/>30))<sp/>*<sp/>1664525UL))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>array[<ref refid="general_concentration_over_threshold_8m_1ad34e9c7e9ae69ae0b9f1866faed5e4ad" kindref="member">j</ref>]<sp/>+<sp/><ref refid="general_concentration_over_threshold_8m_1ad34e9c7e9ae69ae0b9f1866faed5e4ad" kindref="member">j</ref>;<sp/></highlight><highlight class="comment">//<sp/>non<sp/>linear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>&amp;=<sp/>0xFFFFFFFFUL;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>&gt;<sp/>32<sp/>bit<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="general_concentration_over_threshold_8m_1ad34e9c7e9ae69ae0b9f1866faed5e4ad" kindref="member">j</ref>;<sp/>j<sp/>%=<sp/><ref refid="crea__e__controlla__i__catalizzatori_8m_1ae113ea7f9e515a12ac4b5595c6faf61e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((++i)<sp/>==<sp/>n)<sp/>{<sp/>state[0]<sp/>=<sp/>state[n<sp/>-<sp/>1];<sp/>i<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref><sp/>=<sp/>n<sp/>-<sp/>1;<sp/><ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>;<sp/>--<ref refid="conc_analysis_8m_1ab7005e24e9bb6ea9b6e14c4ac2614a31" kindref="member">k</ref>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>=<sp/>(state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>^<sp/>((state[i<sp/>-<sp/>1]<sp/>^<sp/>(state[i<sp/>-<sp/>1]<sp/>&gt;&gt;<sp/>30))<sp/>*<sp/>1566083941UL))<sp/>-<sp/><ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>state[<ref refid="garbage_search_8m_1a1de1a45bc56b002aa1ad94bb5f54a1ca" kindref="member">i</ref>]<sp/>&amp;=<sp/>0xFFFFFFFFUL;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>&gt;<sp/>32<sp/>bit<sp/>machines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((++i)<sp/>==<sp/>n)<sp/>{<sp/>state[0]<sp/>=<sp/>state[n<sp/>-<sp/>1];<sp/>i<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>state[0]<sp/>=<sp/>0x80000000UL;<sp/></highlight><highlight class="comment">//<sp/>MSB<sp/>is<sp/>1;<sp/>assuring<sp/>non-zero<sp/>initial<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>n;<sp/></highlight><highlight class="comment">//<sp/>force<sp/>gen_state()<sp/>to<sp/>be<sp/>called<sp/>for<sp/>next<sp/>random<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/alessandrofilisetti/Documents/GIT/carness/mtrand.cpp"/>
  </compounddef>
</doxygen>
